from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.utils.markdown import hlink
from choose import choose, choose_decs, choose_week
import logging
logging.basicConfig(level=logging.INFO)
from main import opener
import os

TOKEN = load_dotenv
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_day_menu = types.KeyboardButton("üìÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å")
    button_week_menu = types.KeyboardButton("üìÜ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é")
    keyboard.add(button_day_menu, button_week_menu)
    await message.reply(f'{message.from_user.first_name}, üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüìÖ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å", —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. \nüìÜ –ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é, –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é. ', reply_markup=keyboard)
    logging.info(f"Received /start command from {message.from_user.first_name}")

@dp.message_handler(text="üìÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å")
async def generate_day_menu(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=1)
    random_generation = types.KeyboardButton("üîÄ –†–∞–Ω–¥–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
    choose_generation = types.KeyboardButton("üìù –í—ã–±–æ—Ä–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
    kb.add(random_generation, choose_generation)
    kb_inline = types.InlineKeyboardMarkup()
    
    random_gen = types.InlineKeyboardButton("üîÄ –†–∞–Ω–¥–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="generate_random")
    option_gen = types.InlineKeyboardButton("üìù –í—ã–±–æ—Ä–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="generate_optionally")
    kb_inline.add(*[random_gen, option_gen])
    await message.reply('üîÄ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞–Ω–¥–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. üçΩÔ∏è\n\nüìù –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é "–í—ã–±–æ—Ä–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è –∏–ª–∏ –¥–∏–µ—Ç—ã. ü•ó', reply_markup=kb_inline)
    logging.info("Received button_day command")
    
    
@dp.callback_query_handler(lambda query: query.data == "generate_random")
async def process_button_click(query: types.CallbackQuery):
    await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å...")
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é generate_random
    await generate_random(query.message)
    
    
@dp.callback_query_handler(lambda query: query.data == "generate_optionally")
async def process_button_click(query: types.CallbackQuery):
    
    await generate_optionally(query.message)


@dp.message_handler(text = "üîÄ –†–∞–Ω–¥–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
async def generate_random(message: types.Message):
    day_menu = choose()
    day_menu_message = "\n".join(day_menu).split("|")
    
    for i in day_menu_message:
        if i.startswith("–°—Å—ã–ª–∫–∞"):
            link = await hlink("–†–µ—Ü–µ–ø—Ç", i.split("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç: ")[1])
            await message.answer(f"–°—Å—ã–ª–∫–∞: {link}")
        else:
            await message.answer(i)
            
    await message.reply("–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
    logging.info("Received generate_random command")
    
@dp.message_handler(text = "üìù –í—ã–±–æ—Ä–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è") #–í—ã–±–æ—Ä–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
async def generate_optionally(message: types.Message):
    #–Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ/–∑–¥–æ—Ä–æ–≤–æ–≥–æ, –¥–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤ –∏ –≤–∫—É—Å–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è.
    kb = types.ReplyKeyboardRemove()
    kb_alot = types.InlineKeyboardMarkup(row_width=2)
    sport_but = types.KeyboardButton("–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", callback_data='sport_but')
    right_but = types.KeyboardButton("–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", callback_data='right_but')
    soon = types.KeyboardButton("–°–∫–æ—Ä–æ...", callback_data = "soon")
    kb_alot.add(*[sport_but, right_but, soon])
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É --", reply_markup=kb_alot)
    logging.info("Received generate_optionally command")
    
@dp.callback_query_handler(lambda query: query.data == "right_but")
async def callback_handler(callback_query: types.CallbackQuery):
    await callback_query.answer("  –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é –¥–ª—è –∑–¥–æ—Ä–æ–≤—ã—Ö...  ")
    await healthy(callback_query.message)
    
@dp.callback_query_handler(lambda q: q.data == "soon")
async def clbh(cquery: types.CallbackQuery):
    await cquery.answer("  –°–∫–æ—Ä–æ...  ")
    await soon(cquery.message)
    
async def soon(msg: types.Message):
    await msg.answer("–í –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∞–∫–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫: ü•óü•¶ –ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–±–µ—Ç–∏–∫–æ–≤ ü•ëü•ï  \nüçîüçï –í–∫—É—Å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ üçùüç∞  \nüéâü•Ç –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –º–µ–Ω—é üçΩÔ∏èüéÇ")


    
async def healthy(message: types.Message):
    os.chdir("./database/healthy_food")
    day_menu_message = "\n".join(choose_decs()).split("|")
    for i in day_menu_message:
        await message.answer(i)
    os.chdir("../..")
    logging.info("Received healthy command")
    
@dp.callback_query_handler(lambda q: q.data == "sport_but")
async def callback_handl(c_query: types.CallbackQuery):
    await c_query.answer("  –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é –¥–ª—è –∑–¥–æ—Ä–æ–≤—ã—Ö –∏ —Å–∏–ª—å–Ω—ã—Ö...  ")
    await sport(c_query.message)

async def sport(message: types.Message):
    os.chdir("database\sport_food")
    try:
        day_menu_msg = "\n".join(choose_decs()).split("|")
        for i in day_menu_msg:
            await message.answer(i)
        await message.reply_sticker(sticker='CAACAgIAAxkBAAELprRl7MZSsWaGbSPGwomhkuKIoVmgCQACMgoAAm4y2AAB_W-265DwO000BA')
    except Exception as Ex:
        await message.answer("–ü–æ—Ö–æ–∂–µ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –ø—Ä–æ–±—É—é –æ–±–Ω–æ–≤–∏—Ç—å—Å—è...")
        logging.info(Ex)
    os.chdir("../..")
    logging.info(f"Received sport command")
    

@dp.message_handler(text="üìÜ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é") #–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—Å–µ —Ç–æ –∂–µ —á—Ç–æ –∏ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å, —Ç–æ–ª—å–∫–æ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 7 –¥–Ω–µ–π
async def generate_week_menu(message: types.Message):
    kb_inline = types.InlineKeyboardMarkup(row_width=1)
    random_gen = types.InlineKeyboardButton("üîÄ –†–∞–Ω–¥–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="generate_random_week")
    option_gen = types.InlineKeyboardButton("üìù –í—ã–±–æ—Ä–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="generate_optionally_week")
    kb_inline.add(*[random_gen, option_gen])
    await message.reply('üîÄ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞–Ω–¥–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é. üçΩÔ∏è \n\nüìù –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é "–í—ã–±–æ—Ä–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è –∏–ª–∏ –¥–∏–µ—Ç—ã. ü•ó', reply_markup=kb_inline)
    
@dp.callback_query_handler(lambda q: q.data == "generate_random_week")
async def clb(cquery: types.CallbackQuery):
    await cquery.answer("  –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –º–µ–Ω—é...  ")
    await random_week(cquery.message)
    
@dp.callback_query_handler(lambda q: q.data == "generate_optionally_week")
async def clb2(cq: types.Message):
    await opt_week(cq.message)
    
async def opt_week(msg: types.Message):
    kb = types.ReplyKeyboardRemove()
    kb_alot = types.InlineKeyboardMarkup()
    sport_but = types.KeyboardButton("–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", callback_data='sport_but_week')
    right_but = types.KeyboardButton("–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", callback_data='right_but_week')
    kb_alot.add(*[sport_but, right_but])
    await msg.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É --", reply_markup=kb_alot)
    logging.info("Received generate_optionally_week command")
    
@dp.callback_query_handler(lambda q: q.data == "sport_but_week")
async def call_sport(c: types.CallbackQuery):
    await c.answer("  –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω–æ–µ –º–µ–Ω—é —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞...  ")
    await week_sport(c.message)
    
async def week_sport(msg: types.Message):
    if os.path.exists("./database/sport_food"):
        os.chdir("./database/sport_food")
    else:
        raise FileExistsError("Wrong Folder!")
    menu = "".join(choose_week()).split("|")
    for i in menu:
        await msg.answer(i)
    await msg.answer("–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
    await msg.reply_sticker(sticker='CAACAgIAAxkBAAELprJl7MUMdRju1O54rKwzFbI0g-BtWgACugADmY-lBwojZMP_GhdkNAQ')
    os.chdir("../..")
    logging.info("Received sport_week_gen command!")
    
@dp.callback_query_handler(lambda q: q.data == "right_but_week")
async def call_right(c: types.CallbackQuery):
    await c.answer("  –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–µ–¥–µ–ª—å–Ω–æ–µ –º–µ–Ω—é...  ")
    await week_right(c.message)
    
async def week_right(msg: types.Message):
    os.chdir("./database/healthy_food")
    menu = "".join(choose_week()).split("|")
    for i in menu:
        await msg.answer(i)
    await msg.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ–Ω—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
    await msg.answer_sticker(sticker='CAACAgUAAxkBAAELprZl7MkBNMUf5GPuT-9iB071X1sb5QACNBAAAnE13ALftpkhnzLlzjQE')
    os.chdir("../..")
    
async def random_week(msg: types.Message):
    if os.path.exists("./database"):
        os.chdir("./database")
    lst = "".join(choose_week()).split("|")
    
    for elem in lst:
        await msg.answer(elem)
    logging.info("received random_gen_week cmd")
    os.chdir("..")


@dp.message_handler(content_types=types.ContentType.ANY, commands=None)
async def handle_message(message: types.Message):
    await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥, –ª–∏–±–æ /start")
    


if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
#üîÄ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞–Ω–¥–æ–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. üçΩÔ∏è\n\nüìù –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é "–í—ã–±–æ—Ä–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è –∏–ª–∏ –¥–∏–µ—Ç—ã. ü•ó